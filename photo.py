import os
import shutil
import uuid
import time
from datetime import datetime
from ultralytics import YOLO

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ·∫£nh g·ªëc v√† n∆°i l∆∞u k·∫øt qu·∫£
SOURCE_DIR = r"C:\tdat\CODE\l·ªçc ·∫£nh_py\images test code"
OUTPUT_HAS_OBJECTS = r"C:\tdat\CODE\l·ªçc ·∫£nh_py\has_objects"
OUTPUT_NO_OBJECTS = r"C:\tdat\CODE\l·ªçc ·∫£nh_py\no_objects"
ERROR_FOLDER = r"C:\tdat\CODE\l·ªçc ·∫£nh_py\errors"  # Th∆∞ m·ª•c ch·ª©a ·∫£nh l·ªói
ERROR_LOG = "errors.txt"
SUMMARY_LOG = "summary.txt"

# T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
os.makedirs(OUTPUT_HAS_OBJECTS, exist_ok=True)
os.makedirs(OUTPUT_NO_OBJECTS, exist_ok=True)
os.makedirs(ERROR_FOLDER, exist_ok=True)  # T·∫°o th∆∞ m·ª•c l·ªói

# M√¥ h√¨nh YOLO
model = YOLO('yolov8n.pt')

# ƒê·ªãnh d·∫°ng ·∫£nh ƒë∆∞·ª£c h·ªó tr·ª£
SUPPORTED = ('.jpg', '.jpeg', '.png', '.webp', '.bmp')
images = [f for f in os.listdir(SOURCE_DIR) if f.lower().endswith(SUPPORTED)]

# X√≥a file log c≈© n·∫øu c√≥
if os.path.exists(ERROR_LOG):
    os.remove(ERROR_LOG)
if os.path.exists(SUMMARY_LOG):
    os.remove(SUMMARY_LOG)

start_time = time.time()
processed = 0
error_count = 0

for idx, file in enumerate(images):
    path = os.path.join(SOURCE_DIR, file)

    try:
        result = model(path, verbose=False)[0]
        labels = [model.names[int(cls)] for cls in result.boxes.cls]

        # ƒê·ªïi t√™n file ƒë·ªÉ tr√°nh ƒë√® n·∫øu tr√πng
        name, ext = os.path.splitext(file)
        new_name = f"{name}_{uuid.uuid4().hex[:6]}{ext}"

        # N·∫øu c√≥ ng∆∞·ªùi ho·∫∑c s·∫£n ph·∫©m ‚Üí copy v√†o has_objects
        if any(label in ['person', 'backpack', 'handbag', 'bottle', 'tv', 'cell phone', 'book'] for label in labels):
            shutil.copy2(path, os.path.join(OUTPUT_HAS_OBJECTS, new_name))
        else:
            shutil.copy2(path, os.path.join(OUTPUT_NO_OBJECTS, new_name))

        processed += 1

        if idx % 20 == 0 or idx == len(images) - 1:
            print(f"‚úî ƒê√£ x·ª≠ l√Ω {idx + 1}/{len(images)} ·∫£nh")

    except Exception as e:
        error_count += 1
        with open(ERROR_LOG, "a", encoding="utf-8") as f:
            f.write(f"{file} - {str(e)}\n")

        # Copy ·∫£nh l·ªói v√†o th∆∞ m·ª•c errors
        try:
            shutil.copy2(path, os.path.join(ERROR_FOLDER, file))
        except Exception as copy_error:
            # N·∫øu l·ªói lu√¥n c·∫£ khi copy th√¨ c≈©ng log ra lu√¥n
            with open(ERROR_LOG, "a", encoding="utf-8") as f:
                f.write(f"{file} - Failed to copy to errors folder: {str(copy_error)}\n")

# T·ªïng k·∫øt
end_time = time.time()
summary = f"""
üóìÔ∏è  Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üì∑  T·ªïng ·∫£nh: {len(images)}
‚úÖ  Th√†nh c√¥ng: {processed}
‚ùå  L·ªói: {error_count}
‚è±Ô∏è  Th·ªùi gian ch·∫°y: {round(end_time - start_time, 2)} gi√¢y
"""

print(summary)
with open(SUMMARY_LOG, "w", encoding="utf-8") as f:
    f.write(summary)
